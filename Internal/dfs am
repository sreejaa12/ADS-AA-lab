import java.util.*;

public class DFSAdjMatrix {
    private int vertices; // Number of vertices
    private int[][] adjMatrix; // Adjacency matrix

    public DFSAdjMatrix(int vertices) {
        this.vertices = vertices;
        adjMatrix = new int[vertices][vertices]; // Initialize matrix with 0s
    }

    // Add an edge to the graph
    public void addEdge(int src, int dest) {
        adjMatrix[src][dest] = 1;
        adjMatrix[dest][src] = 1; // Since it's an undirected graph
    }

    // DFS traversal
    public void dfs(int start) {
        boolean[] visited = new boolean[vertices]; // Track visited nodes
        dfsRecursive(start, visited);
    }

    // Recursive DFS function
    private void dfsRecursive(int node, boolean[] visited) {
        visited[node] = true; // Mark the node as visited
        System.out.print(node + " "); // Print the node

        for (int i = 0; i < vertices; i++) { // Check all vertices
            if (adjMatrix[node][i] == 1 && !visited[i]) { // If edge exists and not visited
                dfsRecursive(i, visited);
            }
        }
    }

    public static void main(String[] args) {
        DFSAdjMatrix graph = new DFSAdjMatrix(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);

        System.out.print("DFS Traversal: ");
        graph.dfs(0); // Start DFS from node 0
    }
}
